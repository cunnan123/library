一.css概述
	什么是css
		层叠样式表，级联样式表，简称样式表
	简称
		设置HTML网页中的元素样式
	css和HTML的关系
		html：负责网页结构的搭建和内容的展示
		css：负责网页的修饰
	css与html的属性
		body： gbcolor text align
		w3c建议尽量使用css的方式来取代html的属性
		css样式：
			1.样式代码高度的重用
			2.提高可维护性
	css的语法规范
		1.使用css的方法
			内联样式
				将css的样式定义在HTML标签的style属性中
				<any style="样式舍命;样式声明"></any>
				内联样式使用的非常少，（禁止使用）
				不能重用，优先级最高
				样式声明
					样式属性：值
				常用css属性
					color:设置文本颜色
						取值：合法颜色值（颜色的英文 #a~f*3 #aaf #abc #afa #ffa)
					font-size:设置字体大小
					background:设置背景颜色
		2.内部样式
			在<head></head>标签中，添加<style></style>标签中，在其内部定义样式规则
			<style>
				样式规则
			</style>
				样式规则：由选择器和样式声明组成
				选择器{
					样式声明；
					样式声明；
				}
			内部样式在本页面可以重用，但是其他页面不能重用
			项目中使用不多，但是学习和测试中大量使用
		3.外部样式
			独立创建一个新文件*.css
				可以在任何网页中引用
				<head>
					<link rel="stylesheet" href="css文件的url">
				</head>
		 外部样式是项目中必须使用的样式写法
	css的样式特性
		1.继承性
			大部分的css效果是可以被子元素继承的
			a标签不会继承
			必须是层级结构
		2.层叠性
			可以为一个元素定义多个样式规则
			规则中属性不冲突，可以同时作用到当前元素上
		3.优先级
			如果样式声明冲突时，按照样式规则优先级取应用
			内联样式优先级最高
			内部样式、外部样式，遵循就近原则
			浏览器默认样式最低
			调整优先级 !important;
	基础选择器
		选择器的作用
			规范了页面中哪些元素能够使用定义好的样式
			为了匹配元素
		基础选择器详解
			通用选择器 select * from xz_user
				*{样式声明}
				*效率极低，尽量少用
				*{margin:0;padding:0}
			元素选择器
				一般用于定义元素的默认样式
			类选择器
				定义页面上某类元素的公共样式，谁想用我，就引用我的class名
				元素通过class属性来引用该类型
				.类名{样式的声明}
				<any class="类名">
				注意："."不能省略
					类名不能以数字开头
					类名不能包含特殊字符(可以包含-_)
				类选择器的特殊用法
					多类选择器
						让一个元素引用多个类选择器
						<p class="font_size font_color"></p>
					分类选择器
						将元素选择器和类型选择器联合使用
						元素选择器.类选择器{}
						可以匹配到，指向了某个类的，具体某个元素
						作用
							指向更精确
							优先级变高
							<span class="font_color">asdf</span>
							span.font_color{background:red;}
			id选择器
				设置指定元素的样式，专属定制
				为元素设置id值，使用#id值作为选择器，编写专属样式
			群组选择器
				将多个选择器放在一起，一块定义某个公共样式
				选择器1，选择器2，选择器3....{公共样式声明}
			后代选择器
				通过元素的后代关系匹配元素
					后代：一层或者多层的嵌套关系
					语法：选择器1 选择器2 选择器3{样式声明}
			子代选择器
				通过元素的子代关系匹配元素（一层嵌套）
				选择器1>选择器2>选择器3{}
			伪类选择器
				匹配元素不同状态下的样式 注意顺序
				链接伪类
					:link 元素尚未访问时的状态样式
					:visited 元素访问过后的状态样式
						#a1:link{color:red;}
						#a1:visited{color:red;}
				动态伪类
					:focus 元素获取焦点时的状态样式
					:hover 鼠标悬停在元素上时的状态样式
					:active 元素激活时的状态样式
						#a1:active{color:blue;}
						#button:active{color:blue;}
		选择器的权值
			权值：标识当前选择器的重要程度，权值越大优先级越高
			!important >1000
			内联样式 =1000
			id选择器 =100
			类和伪类选择器 =10
			元素选择器 =1
			*选择器	=0
			继承的样式无权值 无
				当一个选择器中含有多个选择器时，需要将所有的权值进行相加，然后再进行比较，权值高的优先显示
					注意：选择器的权值计算不会超过其最大的数量级（1w个id选择器相加也不会到1000）
				群组选择器的权值，单独计算，不会相加
				样式后面加!important 该样式会获取最高优先级。内联样式不能添加！important
				如果权值相同，使用就近原则
	尺寸和边框
		尺寸属性
			改变元素的宽高
				width
					最大宽度 max-width
					最小宽度 min-width
				height
					最大高度 max-height
					最小高度 min-height
			附加知识点 单位
				尺寸单位
					px像素
					in英寸 1in=2.54cm
					pt磅值，多数表示字体大小 1pt=1/72in
					cm mm 厘米，毫米
					em 相对单位，相对父元素的倍数
					rem 相对单位，相对根元素的倍数，指的body或html
					% 相对单位，相对父元素的百分之多少
				颜色单位
					颜色的英文单词
					#rrggbb rgb光学三原色
					#abc
					rgb(255,255,255)'
					rgb(r%,g%,b%) 使用极少
					rgba(r,g,b,alpha);0~1 rgba(255,255,0,0.5)
			页面中可以设置尺寸的元素
				所有的块级元素都允许设置尺寸
				所有的行内块元素都允许设置尺寸 表单元素（除了单选按钮和复选框）
				本身具备宽高属性的元素 img table 
				大部分行内元素不允许修改尺寸
溢出
	overflow overflow-x overflow-y
	当内容多，元素区域小的时候，就会产生溢出效果
	默认是纵向溢出
	取值
		visible 可见的，默认值
		hidden 隐藏的，溢出内容不可见
		scroll 显示滚动条，溢不溢出都会有横向和纵向滚动条
		auto 溢出部分显示滚动条，并可用

边框属性
	border:width style color;
	width
		边框的宽度，以px为单位的数字
	style
		取值 solid 实线
			 dotted 虚线（点）
			 dashed 虚线（短线）
			 double 双实线
	color
		边框的颜色，合法的颜色值 (transparent 透明色)
	这种写法，同时设置4个边框，是一种简写方式
	取消边框
		border:none/0;
	单边设置
		border-top/right/bottom/left
	单属性设置
		border-width/style/color
	单边单属性
		boder-top-width
边框倒角（圆角）
	将直角倒成圆角
		border-radius:5%;
		border-radius:50px;
	单角设置
		使用两条边确认一个角，先写上下后写左右
		border-top-left-radius	左上角
		border-top-right-radius	右上角
		border-bottom-left-radius 左下角
		border-bottom-right-radius 右下角
	边框阴影
		box-shadow:10px 10px 30px 30px red inset;
		必须值
			x轴偏移量 y轴偏移量 
		可选值
			阴影模糊距离 阴影扩散距离 阴影颜色 把默认的外部阴影设置成内部阴影
轮廓
	指边框的边框，绘制边框外部的线条
		outline:width style color; 输入框input
框模型（盒模型）
	页面元素皆为框
	定义了元素框处理元素内容，内边距，外边距以及边框的一种计算模式
	定义了一个元素占地大小的计算方式
	盒子模型默认的计算方式
		元素实际占地宽度=左外边距+左边框的宽度+左内边距+内容区域的宽度+右内边距+右边框宽度+右外边距
		内边距 
			元素边框与内容之间的空白间距
		外边距
			围绕在元素边框外的空白区域（元素与元素之间的距离）
	外边距
		margin 定义4个方向外边距
		margin-top/right/bottom/left 定义某个方向的外边距
		取值
			以px为单位的数字
				为正数 
					   top 元素往下移动
					   left 元素往右移动
				为负数
					   top 元素往上移动
					   left 元素往左移动
				margin的效果
					改变元素在页面上的位置，多用于微调
			
			为%
				相对父元素尺寸的百分比
			为auto
				只对左右外边距生效，对上下外边距不起左右
				自动计算块级元素的外边距，控制块级元素在水平方向居中对齐
		简写方式
			margin:v1 v2; 上下 左右
			margin:v1 v2 v3; 上 左右 下
			margin:v1 v2 v3 v4; 上 右 下 左
		自带外边距的元素有哪些
			h1~h6 p body ol ul dl pre 
			通常要清除这些元素的自带外边距*{margin:0;padding:0;}
		外边距的特殊效果
			1.外边距的合并
				当两个垂直外边距相遇时，他们讲合并成一个外边距
				最终的取值，取决于两个外边距中距离大的值
			
				行内元素以及行内块元素的外边距
					行内元素垂直外边距无效（img除外），水平外边距相遇了之后外边距相加
					行内块，设置垂直外边距，整行元素跟着发生变化，但不影响元素的垂直外边距
				外边距溢出
					在特殊条件下，给子元素设置的上外边距，会作用到父元素上
						特殊条件
							1，父元素没有上边框boder-top
							2,只有第一个子元素设置上边距时，才会出现此效果
							解决方案
								1,为父元素增加上边框border-top;弊端：元素占地高度变大了
								2,直接给父元素添加上内边距;弊端：元素占地高度变大了
								3，在父元素的第一个子元素位置添加一个空的table标签，利用table占用父元素的第一个子元素的位置，然后原来的第一个子元素就变成了父元素的第二个子元素
	内边距	
		不会影响其他元素，但是会改变元素自己的占地尺寸，会变大
		padding: value;设置4个方向的内边距
		padding-top/right/bottom/left 定义单方向的内边距
		取值
			以px为单位的数字
			%
		简写方式
			padding:value;设置4个方向的内边距
			padding:v1 v2; 上下 左右 padding 么有auto
			padding:v1 v2 v3; 上 左右 下
			padding:v1 v2 v3 v4;上 右 下 左

	box-sizing 属性
		设置盒子模型的计算方式
			默认计算方式 元素实际占地宽度=...
		取值
			content-box 默认值,会采用默认计算方式
			border-box 元素的尺寸（定义的宽高包含border padding 和内容区域的宽高）
				元素实际占地宽度=左右外边距+设置的宽度width
				元素实际占地高度=上下外边距+设置的高度height
		块级元素、行内元素、行内块
			块级元素：独立成行，可以设置宽高，margin上下有效
			行内元素：与其他行内元素和行内块，共用一行，设置宽高无效，设置margin上下边距无效
			行内块：与其他行内元素和行内块，共用一行，可以设置宽高，margin上下有效
				一行行内元素，其中一个设置了上下margin 整行都跟着移动
背景
	background-color:
		取值
			合法的颜色值
			transparent; 透明
				背景色的填充默认从边框位置处开始
		背景图片
			background-image:url(资源路径);
		背景图片的平铺
			background-repeat:
				取值
					repeat repeat-x repeat-y no-repeat
		背景图的定位
			background-position:x y
				取值
					以px为单位的数字
						指的是，图片在水平和垂直方向的偏移量
					x% y%
						50 50 中间
						0 0 左上
						100 100 右下
					关键字
						x left/center/right
						y top/center/bottom
		背景图的尺寸
			background-size:width height
				取值
					以px为单位的数字
					%
					cover 图片的宽高比不变，铺满整个容器的宽高，图片溢出的部分会被裁剪掉
					cotain 图片的宽高比不变，但是，要缩放到图片完全展示出来，所以会有空白区域
		背景图的固定
			background-attachment:
			将背景图固定在网页某个位置，一直在可视的区域中显示，不会随着网页滚动条改变位置
				取值
					scroll 默认值， 会随着网页滚动条改变位置
					fixed 固定，不会随着网页滚动条改变位置
		简写
			background color url repeat attachment position;
			
渐变gradient
	什么是渐变
		多种雅安色平缓变化的一种显示效果
		渐变的主要因素--色标
			色标	一种颜色以及他出现的位置
			一个渐变至少两个色标
		渐变的分类
			线性渐变
				以直线的方向来填充渐变色
			径向渐变
				以圆形的方式实现渐变色
			重复渐变 
				将线性渐变或径向渐变重复几次
		线性渐变
			background-image:linear-gradient(方向，色标1，色标2，...)
			色标 颜色的合法值 位置的百分比
			方向 
				to top/right/bottom/left
				角度 按顺时针
					 0deg to top
					 90deg to right
					 180deg to bottom
					 270deg to left
		径向渐变
			background-image:radial-gradient(半径 at 圆心,色标1，色标2,...);
			半径：以px为单位的数字
			圆心：x y 以px为单位的具体数值
				  x% y% 元素的宽高占比
				  关键字
					x:left/center/right
					y:top/center/bottom
		重复线性渐变
			rpeating-linear-gradient(to right,#faa 0px,#fa 50px)
			注意在重复渐变中，色标的位置，要给绝对值数字，不要用%
		重复径向渐变
			repeating-radial-gradient(50px at center center,red 0px,blue 50px)
		浏览器渐变兼容性
			各个浏览器新版本都支持渐变
				对于不知道的旧版本，可以添加浏览器内核前缀的方式，做兼容，让浏览器支持
				chrome&safari -webkit-
				firefox -moz-
				ie -ms-
				opera -0-
文本格式化
	字体属性
			指定字体类型
				font-family:类型1,类型2,类型3,...
			字体大小
				font-size:
				取值	
					以px，pt为单位的数字
					em,rem
			字体加粗
				font-weight:bold/normal/lighter/bolder
				无单位数字：100--1000 常用是400--900
			字体样式
				font-style:italic/normal
			小型大写字母
				font-variant:small-caps/normal;
			简写方式
				font:style variant weight size family;
				简写方式最少要有size和family
	文本格式化
		文本颜色
			color
		文本的水平对齐方式
			text-align
				left/center/right/justify(两端对齐)
		行高（垂直对齐）
			定义一行数据的高度
				如果行高大于字体本身的大小，该行文本在行高内成垂直居中的显示效果
				line-height:
					取值
						以px为单位的数字，一般与容器的高相同
						无单位数字，line-height:2;字体大小的倍数
		线条的修饰
			text-decoration
				none 没有线条 去掉a标签的下划线
				underline 下划线
				overline 上划线
				line-through 删除线
		首行缩进
			text-indent
				以px为单位的数字
		文本的阴影
			text-shadow:5px 5px 5px #aaf;
				h-shadow v-shadow blur color
table的样式
	表格的常用属性
		之前学习的样式，在表格中，基本都能使用
		边框属性 table td中
		边距属性中 table都能使用，td没有margin
		尺寸属性 table都能使用
		文本格式属性 font-* text-* line-height
		背景属性 颜色属性 图片 渐变
		vertical-align:top/middle/bottom 
	表格特有的属性
		边框合并
			border-collapse
			separate 默认，边框分离的模式
			collapse 边框合并
		边框的边距（table的属性）
			设置单元格与单元格之间的距离 必须保证border-collapse:separate;
			border-spacing:10px;
			border-spacing:10px 20px;
		标题的位置
				caption-side
					top/bottom
		表格的显示规则，告诉浏览器，我这张表格如何渲染，td尺寸的计算方式
		table-layout
			auto 默认值，自动表格布局，列的尺寸实际是由内容决定的
			fixed 固定表格的布局,列的尺寸由设置的值决定
				需要table有尺寸，td有尺寸
				优缺点
						auto						fixed
					---------------------------------------------	
					单元格大小适应内容		 单元格尺寸取决于设定的值
					----------------------------------------------
					表格复杂时，加载速度慢	 任何情况下会加速表格的加载
					----------------------------------------------
					自动布局比较灵活		布局比较死板
					----------------------------------------------
					适用于不确定每列大小并	 当确定每列尺寸的时候使用
					且表格不太繁琐的时候
定位
	什么是定位
		元素在页面中的胃中
	分类
		普通流定位
			默认文档流
		浮动
		相对定位 
		绝对定位
		固定定位
	普通流定位
		文档流定位，页面中所有元素的默认显示方式
			每个元素在页面中都有自己的空间（盒子模型）
			每个元素都是从父元素的左上角开始显示的
			块级元素默认按照从上往下的方式诸个排列，每个元素独占一行
			行内元素是多个元素在一行中显示，从左往右排列
	浮动
		浮动特点
			元素一旦浮动起来，脱离文档流
			不占页面空间，其他未浮动元素会上前补位
			浮动的元素会停靠在父元素的左边或者右边
			或其它已经浮动元素的左/右的边缘
			浮动解决了多个块级元素在同一行内显示的问题
		语法
			float
			取值
				left right 
		浮动元素引发的特殊情况
			当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示	
				默认情况下，最后一个元素会优先显示在最高的位置，再往左排列
				会发生浮动元素占位的情况，浮动元素根据浮动方向，占据方向之上的位置，不允许最后一个元素占用
			浮动对默认宽度的影响（前提，不设置宽度的情况下）
				块级元素不写宽度，默认是父级元素的100%
				一旦浮动起来，宽度以内容为准
			元素一旦浮动起来，就变为块级元素，允许修改尺寸，可以设置垂直外边距
			文本、行内元素、行内块，是不会被浮动元素压在下方的，而是会避开，环绕着浮动元素显示
		清除浮动
			清除浮动元素给我带来的影响
			元素一旦浮动之后，会对后续的元素带来一定的影响，后续元素会上前补位，如果不希望后续元素上前补位，可以给后续的
			元素添加清除浮动的属性
			clear 
				取值
					left
					right
					both
		浮动元素对付元素高度带来的影响（高度坍塌）
			块级元素不写高度，他的高度是根据内容判定的
			如果内部元素都浮动了，内部元素都脱离了默认文档流
			父级元素就失去了高度-----高度坍塌
				解决方案
					给父级元素添加高度
						弊端 不是每次都知道具体的高度是多少
					设置父级元素也浮动
						弊端 会影响父级元素后面的其他元素
					给父级元素设置overflow:hidden/auto
						弊端 如果内容想要溢出显示，显示不了
					在父元素中追加一个空的块级元素，只设置clear:both			
显示
	显示方式
		决定了元素在网页中的表现形式（块级，行内，行内块，table）
		语法
			display
				取值
					none 不显示元素，隐藏，不占位置
					block 让元素表现为块级
						独占一行，可以设置尺寸以及上下外边距
					inline 让元素表现为行内
						多个元素一行显示，不能设置宽高以及上下外边距
					inline-block 让元素表现为行内块
						多个元素一行显示，可以设置尺寸以及上下外边距
					table 让元素表现为table
						尺寸以内容为准，独占一行，允许修改尺寸
	显示效果
		属性 visibility
			取值
				visible/hidden
				visibility:hidden和display:none的区别
					前者隐藏，不脱离默认文档流，依然占位
					后者隐藏，脱离了默认文档，不占页面位置
	透明度
		opacity:0~1 1不透明 0全透明
			opacity与rgba的区别
				前者
					作用于元素，当一个元素设置了opacity之后，这个元素本身以及所有子元素的与颜色相关的属性，都会受到影响
				后者
					rgba(0~255,0~255,0~255,0.5)只会改变你设定的这个颜色透明度
	垂直对齐
		vertical-align
			在table中使用只有三个值，
			在img中使用时有四个值
			控制图片与两边文字垂直对齐方式
			取值
				top/middle/bottom/baseline 默认值是baseline
	光标
		改变鼠标悬停在元素时的样式
			cursor
				取值
					default 箭头
					pointer 小手
					crosshair +
					text |
					wait 等待
					help 帮助
列表
	列表标识
		list-style-type:none/disc/circle/square;
	列表标识的位置
		list-style-position:outside(默认值)/inside
	列表项引用图片
		list-style-image:url()
	简写
		list-style:type url() position;
		常用方式
			list-style:none;
相对/绝对/固定定位position
	position
		取值
			static 静态，默认值，文档流定位
			relative 相对定位
			absolute 绝对定位
			fixed 固定定位
				将元素的position设置为relative或absolute或fixed中的任意一个，这个元素就叫做已定位元素
		偏移属性
			距离哪个方向多远
			top/right/bottom/left
				取值
					以px为单位的数字
		相对定位	
			元素相对于它原来的位置偏移
				在元素位置做微调的时候使用/配合绝对定位使用
			语法
				position:relative;配合偏移属性使用
				相对定位不脱离文档流，不会让后面元素补位
		绝对定位
			position:absolute;配合偏移属性使用
			特点
				脱离文档流，不占页面空间，后边元素补位
				绝对定位的元素，会相对于"最近的""已定位的"祖先元素去做偏移量
				绝对定位元素，没有已定位的祖先元素时，相对于body做偏移
				绝对定位会让元素变为块级元素
					出现堆叠效果，就使用绝对定位
		固定定位
			fixed
			将元素固定在页面的某个位置，位置不会随着滚动条发生变化，一直固定在可视区域
			固定定位始终相当于body去实现位置偏移
			固定定位脱离文档流，不占页面空间，定位的元素会变成块级
			position:fixed;配合偏移属性使用
	堆叠顺序
		默认堆叠顺序，后发生定位的堆叠层级高
		默认堆叠，不管堆叠多少层，不会大于设置属性z-index的顺序
		父子元素之间，子元素永远在父元素上面
		只有已定位元素，才能使用z-index
		z-index:无单位数字; 取值范围：2^31-1
css3高级
	复杂选择器
		兄弟选择器
			作用于兄弟元素，只能往后找，不能往前找
				兄弟元素：具备相同父级元素的平级元素之间，称为兄弟元素
					相邻兄弟选择器
						选择器1+选择器2{}
						在选择器1的后面，紧跟着一个元素，这个元素还得匹配到选择器2
					通用兄弟选择器
						获取某元素后面所有满足条件的兄弟元素
						选择器1~选择器2{}
		属性选择器
			id class name type value style title ...
			允许通过元素所带来的属性以及值来匹配元素
				基本语法
					[attr]{} ex: [id]{}匹配有id属性的标签
					elem[attr]{} ex: div[title]{} 匹配有title属性的div标签
					[attr1][attr2]...{} ex:[class][title]{}
					[attr=value]{} ex:[id=p2]{} 匹配id值为p2的元素
					[attr*=value]属性值中，包含指定值的元素
					[attr~=value]属性值中，包含指定单词的元素
					[attr^=value]属性值中，以value开头的元素
					[attr$=value]属性值中，以value结尾的元素
		伪类选择器
			目标伪类
				突出显示活动的HTML锚点元素，匹配被激活的锚点
				选择器:target{} ex: div:target{}
			结构伪类
				:first-child{} 匹配的元素是其父元素的第一个子元素
				:last-child{} 匹配的元素是其父元素的最后一个子元素
				:nth-child(n){} 匹配的元素是其父元素的第n个子元素，n从1开始
				:empty 匹配没有子元素的元素
					ex: div:empty{}
				:only-child 匹配属于其父元素的唯一子元素
					ex: p:only-child{}
				否定伪类 :not(selector)
					div:not(:empty){} 匹配非空的div
		伪元素选择器
				h2::first-letter{color:#f00;} 匹配某个元素的首字符
				h2::first-line{color: #faf;}  匹配某个元素的首行字符，首行字符与首字符冲突时，优先首字符	
				h2::selection{color: #aaa;} 匹配用户选取的内容，只限字体颜色和背景颜色样式
内容生成
	使用css动态的向元素中插入一段内容
	:before或者::before
		匹配到元素的内容区域之前，插入的伪元素
	:after或者::after
		匹配到元素的内容区域之后，插入的伪元素
	内容生成可以解决的问题
		外边距溢出
			父元素没有外边框，给第一个在元素设置上外边距，父元素也会发生作用
弹性布局
	什么是弹性布局
		一种布局方式，主要解决某元素中的子元素的布局方式，为布局提供最大的灵活性
	弹性布局的相关概念和专业术语
		容器
			要布局的子元素的父元素称之为容器，容器中写display:flex;
		项目
			要布局的子元素称之为项目
		主轴
			项目们排列的方向，称之为主轴（水平和垂直）
				如果项目们是按照横向排列，x轴就是主轴
				如果项目们是按照纵向排列，y轴就是主轴
		交叉轴
			与主轴垂直相交的方向轴叫做交叉轴
	语法
		将元素变为弹性容器，他所有的子元素将变成弹性项目，按照弹性布局的方式去排列显示
		元素设置为flex容器之后，子元素一些样式属性会失效
			float/clear/vertical-align失效
			子元素允许修改尺寸（项目是行内元素也可以修改尺寸）
			容器的对齐方式text-align失效
			display
				取值
					flex 将块级元素变为容器
					inline-flex	将行内元素变为容器
		弹性容器的样式属性
			flex-direction 主轴方向	
				取值
					row 默认值，主轴是x轴，主轴起点在左端
					row-reverse 主轴是x轴，主轴起点在右端
					column 主轴是y轴，主轴起点在顶端
					column-reverse 主轴是y轴，主轴起点在底端
			flex-wrap 当一个主轴排列不下所有的项目时，项目的显示方式
				取值
					nowrap 默认值，空间不够时，不换行，项目自动压缩
					wrap 空间不够就换行，项目不压缩
					wrap-reverse 
			flex-flow 是flex-direction和flex-wrap的缩写
				取值
					ex: flex-flow:row wrap;
			justify-content 定义项目在主轴上的对齐方式
				取值
					space-between 两端对齐
					space-around 每个间距相同
					flex-start 默认值，在主轴起点对齐
					flex-end 在主轴的终点对齐
					center 在主轴上居中对齐
			align-items 项目们在交叉轴上的对齐方式（容器高度大于项目高度）
				取值
					flex-start 交叉轴起点对齐
					flex-end 交叉轴终点对齐
					center 交叉轴居中对齐
					baseline 交叉轴基线对齐
					stretch 如果项目未设置高度，在交叉轴上充满容器
		项目的属性
			是单独设置给一个项目的，不影响容器和其他项目
			order
				取值
					为无单位的整数，定义项目的排列顺序，值越小，离起点越近，默认值为0
			flex-grow
				定义项目的放大比例，如果容器有足够大的剩余空间，项目将按照比例放大
				取值
					为无单位的整数，默认值为0，不放大。
					取值越大，占据的剩余空间越多
			flex-shrink
				定义项目的缩小比例，空间不足时，项目该如何缩小
				取值
					无单位整数
						默认值为1，空间不足，等比例缩小
						0时，不缩小
						取值越大，占据空间越小
			align-self 控制某个项目在交叉轴上的对齐方式，与其他项目无关（容器高度大于项目高度）
				取值
					flex-start 交叉轴起点对齐
					flex-end 交叉轴终点对齐
					center 交叉轴居中对齐
					baseline 交叉轴基线对齐
					stretch 如果项目未设置高度，在交叉轴上充满容器
					auto 继承容器的align-items的效果
css hack
	由于不同的浏览器，比如IE6 IE7 firefox
	对css的解析认识不同，会导致生成的页面效果不同，无法得到我们预期的效果
	这个时候我们需要针对不同的浏览器去写不同的css
	让代码同时兼容不同的浏览器
	这个针对不同浏览器写不同css代码的过程，叫做css hack
	课上不讲解，tmooc有对应的视频
转换
	什么是转换
		改变元素在页面中的位置、大小、角度、形状等的一种方式
		转换分为
			2D转换，在x轴和y轴上，发生转换效果
			3D转换，添加了z轴
	转换属性
		transform
			取值
				transform-function
				none
			如果有多个转换函数，用空格隔开
	转换原点
		transform-origin
			取值
				px为单位的数字/%/关键字
				2个值，表示原点在x轴和y轴上的位置
				3个值，x,y,z轴
	2D转换函数
		位移
			改变元素在页面中的位置
			transform:translate(x);指定元素在x轴上的位移距离，取值为正，元素往右，取值为负，元素往左
			transform:translate(x,y);指定元素在x轴和y轴上的位移距离，取值为正，元素往右/下，取值为负，元素往左/上
			transform:translateX(x);指定元素在x轴上的位移距离，取值为正，元素往右，取值为负，元素往左
		缩放
			改变元素在页面中的尺寸
			tansform:scale(n)
				取值
					无单位的数字
					大于1，根据转换原点放大
					大于0小于1，根据转换原点缩小
					大于-1小于0，翻转缩小（水平和垂直方向都翻转了180度）
					小于-1，翻转放大
			transform:scale(x,y); x轴和y轴缩放尺寸
			transform:scaleX(x) 单独设置x轴的缩放
			transform:scaleY(y) 单独设置y轴的缩放
		旋转
			改变元素在页面中的角度
			transform:rotate(ndeg);
			n为正 顺时针旋转
			n为负 逆时针旋转
			注意
				转换原点会影响最后的旋转效果
				旋转是连同坐标轴一起旋转的，会影响旋转后的位移效果
		倾斜
			改变元素在页面中的形状
			transform:skew(x);x轴在倾斜，等同于skewX(x)
				让元素向着x轴发生倾斜，实际上改变的是y轴的角度
				+ 逆时针旋转
				- 顺时针旋转
			transform:skew(x,y);
			transform:skewY(y)
				让元素向着y轴发生倾斜，实际上改变的是x轴的角度
				+ 顺时针旋转
				- 逆时针旋转
	3D转换
		浏览器不支持3D的位移，z轴看不到，只能模拟
		透视距离
			模拟人的眼睛到3D转换元素之间的距离
			perspective
			该属性要加在转换元素的父元素上
		3D旋转
			transform:rotate3D(0,0,1,20deg);
			取值
				rotateX(xdeg)
					以x轴为中心轴，旋转元素的角度（烤羊腿）
				rotateY(ydeg)
					以y轴为中心轴，旋转元素的角度（旋转门）
				rotateZ(zdeg)
					以z轴为中心轴，旋转元素的角度（风车）
				rotate3D(x,y,z,20deg);
					x,y,z取值大于0的数字时，表示该轴参与旋转，取值为0，表示不参与旋转
过渡
	CSS属性值，在一段时间内容平缓的变化
		transition-property:background;
		transition-property:border-radius;
		transition-property:all;

		能够使用过渡效果的属性
			颜色
			取值为数字的属性
			转换
			阴影
			渐变
			visibilit
	指定过渡持续时间
		transition-duration:1s/1000ms;
		简写方式
			transition:all 1s;
			transition:1s;----不要写在hover里，写在元素本身的样式里s
过渡
	某元素的css属性值在一段时间内，平滑改变到另外一个值
	过渡主要观察的是过程和结果
	设置能够过渡的属性
		支持过渡效果的样式属性
			颜色的属性
			取值为数值
			transform
			渐变
			visibility
			阴影
			transition-property:上面的css属性/all;
			transition-duration:过渡时长，单位s或ms
			指定过渡时间曲线函数
				transition-timing-function
					取值
						ease 默认值，慢-->块-->慢  慢速开始，快速变快，慢速结束
						linear 匀速
						ease-in 慢-->快  慢速开始，快速结束
						ease-out 快速开始，慢速结束
						ease-in-out 慢速开始，先加速再减速，慢速结束
			制定延迟执行过渡的时间
				transition-delay: 单位s/ms
	过渡属性的编写位置
		将过渡放在元素声明的样式中（元素自己的样式里），过渡效果有去有回
		将过渡效果放在元素的触发操作中（hover),过渡效果有去无回
			简写方式
				transition:property duration timing-function delay;
				最少的简写方式是
					transition:duration;
动画 1秒=24帧
	使元素从一种样式，改变到另一种，再改变到其他样式...
	相当于将很多个过渡效果放到一起使用
	关键帧
		动画的执行时间点
		该时间点上的样式
	动画的实现步骤
		声明动画及动画关键帧
			@keyframes 动画名称{
				//定义关键帧
				0%{动画开始时的样式}
				...
				100%{动画结束时的样式}
			}
		调用动画
			animation-name:动画名称;
			animation-duration:动画播放一个周期时间
			animation-delay:动画延迟时间
			animation-timing-function:动画的速度时间曲线函数
				ease/linear/ease-in/ease-out/ease-in-out
			animation-iteration-count:infinite/具体的数字;指定动画的播放次数
			动画的播放方向
				animation-direction:normal正常播放0%-100%/reverse逆向播放100%-0%/alternate轮流播放，播放方向的轮询播放，先正向播放后逆向播放;
			简写方式
				animation:name duration timing-function delay iteration-count direction;
				最少简写
					animation name duration;
			animation-fill-mode:
				指定动画播放前后的显示状态
					none 默认值
					forwards 动画完成后，保持在最后一个关键帧上
					backwards(需要配合delay)动画开始之前，保持在第一个关键帧上
					both 同时设置forwards 和backwards
动画的兼容
	如果要兼容低版本浏览器，需要在声明动画的时候加前缀
	@keyframes 动画名称{}
	@-webkit-keyframes 动画名称{}
	@-ms-keyframes 动画名称{}
	@-moz-keyframes 动画名称{}
	@-o-keyframes 动画名称{}

css3总结
	优化
		目的
			减少服务器压力，提升用户体验
		原则
			尽量减少http请求的个数	
			页面顶部引入css文件将css和js放到外部独立的文件夹中
			css代码优化
				缩小样式文件
				减少样式的重写
				避免出现康德src和href,
				选择更优的样式属性值，使用样式简写方式
				代码压缩

				
			












